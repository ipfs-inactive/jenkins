<?xml version='1.0' encoding='UTF-8'?>
<org.jenkinsci.plugins.configfiles.GlobalConfigFiles plugin="config-file-provider@2.16.4">
  <configs class="sorted-set">
    <comparator class="org.jenkinsci.plugins.configfiles.GlobalConfigFiles$1"/>
    <org.jenkinsci.plugins.configfiles.groovy.GroovyScript>
      <id>Jenkinsfile</id>
      <name>Jenkinsfile</name>
      <comment>Jenkinsfile</comment>
      <content>#!groovy

node(label: &apos;linux&apos;) {
    checkout scm
    def pipelineToRun = &quot;&quot;
    try {
        def pip = sh(returnStdout: true, script: &quot;cat ci/jenkins&quot;).trim()
        pipelineToRun = pip
    } catch (err) {
      // assume javascript if we don&apos;t find ci/jenkins
      // TODO should try to understand which project to build instead
      pipelineToRun = &quot;javascript&quot;   
    }
    configFileProvider([configFile(fileId: pipelineToRun, variable: &apos;foundPipeline&apos;)]) {
        load &quot;$foundPipeline&quot;
    }
}()</content>
      <providerId>org.jenkinsci.plugins.configfiles.groovy.GroovyScript</providerId>
    </org.jenkinsci.plugins.configfiles.groovy.GroovyScript>
    <org.jenkinsci.plugins.configfiles.groovy.GroovyScript>
      <id>go-ipfs-jenkinsfile</id>
      <name>go-ipfs-jenkinsfile</name>
      <comment>Pipeline for go-ipfs task</comment>
      <content>#!groovy

{ -&gt;

  def VERSION = &quot;latest&quot;
  def IMAGE = &quot;quay.io/ipfs/go-ipfs:$VERSION&quot;
  def image = docker.image(IMAGE)

  ansiColor(&apos;xterm&apos;) {withEnv([&quot;TERM=xterm-color&quot;]){ timeout(time: 15, unit: &apos;MINUTES&apos;){
    stage(&quot;Build Container&quot;) {
      node(label: &apos;linux&apos;) {
        checkout scm
        VERSION = sh(returnStdout: true, script: &quot;git rev-parse HEAD&quot;).trim()
        IMAGE = &quot;quay.io/ipfs/go-ipfs:$VERSION&quot;
        image = docker.image(IMAGE)

        docker.build(IMAGE, &quot;-f ci/Dockerfile.buildenv .&quot;)
      }
    }

    def dexec = &quot;docker exec&quot;

    stage(&quot;Checks&quot;) {
      parallel(
        &apos;go fmt&apos;: { node(label: &apos;linux&apos;) {
          image.withRun runArgs(), { c -&gt;
            sh &quot;$dexec ${c.id} make test_go_fmt&quot;
          }
        }},
        &apos;go build&apos;: { node(label: &apos;linux&apos;) {
          // due to bug in Jenkins (JENKINS-38268) names of closure params have to be different
          image.withRun runArgs(), { c1 -&gt;
            sh &quot;$dexec ${c1.id} make cmd/ipfs/ipfs&quot;
            sh &quot;$dexec ${c1.id} sh -xc &apos;cp cmd/ipfs/ipfs cmd/ipfs/dist; cd cmd/ipfs/dist; tar -czvf ../go-ipfs_linux-amd64.tar.gz .&apos;&quot;
            sh &quot;docker cp ${c1.id}:/go/src/github.com/ipfs/go-ipfs/cmd/ipfs/go-ipfs_linux-amd64.tar.gz go-ipfs_linux-amd64-${env.BUILD_NUMBER}.tar.gz&quot;
            archiveArtifacts artifacts: &quot;go-ipfs_linux-amd64-${env.BUILD_NUMBER}.tar.gz&quot;, fingerprint: true
          }
        }}
      )
    }

    stage(&quot;Tests &amp; Coverage&quot;) {
      parallel(
        &apos;go test&apos;: { node(label: &apos;linux&apos;) {
          image.withRun runArgs(), { c -&gt;
            sh &quot;$dexec ${c.id} make -j3 -Otarget test_go_expensive&quot;
          }
        }},
        &apos;sharness&apos;: { node(label: &apos;linux&apos;) {
          image.withRun runArgs(), { c1 -&gt;
            try {
              sh &quot;$dexec ${c1.id} make -j3 -Otarget test_sharness_expensive CONTINUE_ON_S_FAILURE=1&quot;
              sh &quot;docker cp ${c1.id}:/go/src/github.com/ipfs/go-ipfs/test/sharness/test-results/sharness.xml sharness-${env.BUILD_NUMBER}.xml || true&quot;
            } catch (err) {
              throw err
            } finally {
              junit allowEmptyResults: true, testResults: &apos;sharness-*.xml&apos;
            }
          }
        }}
      )
    }}}}

}


@NonCPS
def runArgs() {
  def pass = [&quot;JENKINS_URL&quot;, &quot;ghprbSourceBranch&quot;, &quot;GIT_BRANCH&quot;, &quot;ghprbActualCommit&quot;,
  &quot;TERM&quot;, &quot;GIT_COMMIT&quot;, &quot;BUILD_NUMBER&quot;, &quot;ghprbPullId&quot;, &quot;BUILD_URL&quot;]
  def override = [color: &quot;t&quot;, TEST_NO_FUSE: &quot;1&quot;, TEST_VERBOSE: &quot;1&quot;]
  def newEnv = [:]
  pass.each {c -&gt; newEnv[c] = env[c] ?: &quot;&quot;}
  newEnv.putAll(override)
  return newEnv.collect  { k, v -&gt; &quot;-e \&quot;$k=$v\&quot;&quot; }.join(&quot; &quot;)
}</content>
      <providerId>org.jenkinsci.plugins.configfiles.groovy.GroovyScript</providerId>
    </org.jenkinsci.plugins.configfiles.groovy.GroovyScript>
    <org.jenkinsci.plugins.configfiles.groovy.GroovyScript>
      <id>javascript</id>
      <name>javascript</name>
      <comment>Pipeline for JavaScript projects</comment>
      <content>#!groovy

{ -&gt; 
  ansiColor(&apos;xterm&apos;) {
    def VERSION = &quot;latest&quot;
    def IMAGE_NAME = env.JOB_NAME.split(/\//)[0]
    stage(&quot;Build Container&quot;) {
      node {
        checkout scm
        VERSION = sh(returnStdout: true, script: &quot;git rev-parse HEAD&quot;).trim()
        writeFile encoding: &apos;utf-8&apos;, file: &apos;Dockerfile&apos;, text: &apos;FROM quay.io/ipfs/js-base:6.9.4&apos;
        sh &quot;docker build -t quay.io/ipfs/$IMAGE_NAME:$VERSION .&quot;
      }
    }

    stage(&quot;Tests&quot;) {
      parallel( 
        &apos;nodejs&apos;:{ node {
          sh &quot;docker run quay.io/ipfs/$IMAGE_NAME:$VERSION &apos;npm run test:node&apos;&quot;
        }},
        &apos;browser&apos;: { node {
          sh &quot;docker run --privileged quay.io/ipfs/$IMAGE_NAME:$VERSION &apos;npm run test:browser&apos;&quot;
        }},
        &apos;coverage&apos;: { node {
          sh &quot;rm container-id || true&quot;
          sh &quot;docker run --cidfile container-id quay.io/ipfs/$IMAGE_NAME:$VERSION &apos;npm run coverage&apos;&quot;
          def CONTAINER_ID = readFile &apos;container-id&apos;
          sh &quot;docker cp $CONTAINER_ID:/usr/src/app/coverage $WORKSPACE&quot;
          archiveArtifacts &apos;coverage/&apos;
        }}
      )
    }
  }
}
</content>
      <providerId>org.jenkinsci.plugins.configfiles.groovy.GroovyScript</providerId>
    </org.jenkinsci.plugins.configfiles.groovy.GroovyScript>
  </configs>
</org.jenkinsci.plugins.configfiles.GlobalConfigFiles>
